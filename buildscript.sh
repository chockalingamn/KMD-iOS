#!/bin/bash
set -e

## Preconditions: 

# Absolute path this script is in, thus /home/user/bin
SCRIPTPATH=$(cd "$(dirname "$0")"; pwd)

## Overridable properties with default fallbacks
WORKSPACE=${WORKSPACE:-${SCRIPTPATH}}
##SCHEME=${SCHEME:-"Menu and Unity"}
##SCHEME=${SCHEME:-"Resource Bundle"}
SCHEME=${SCHEME:-"Min KÃ¸rsel"}
SDK=${SDK:-"iphoneos5.1"}
CONFIGURATION=${CONFIGURATION:-"Release"}
PROVISIONING_PROFILE=${PROVISIONING_PROFILE:-"B1ECC450-D870-4502-9F31-FEBCB3689E90"}
PROVISIONING_PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/${PROVISIONING_PROFILE}.mobileprovision"
CODE_SIGN_IDENTITY=${CODE_SIGN_IDENTITY:-"iPhone Distribution: Trifork A/S"}
BUILD_DIR="build"

BUILD_VERSION=${BUILD_VERSION:-"2.0.0"}


### ********* FUNCTIONS ************

function failed()
{
    local error=${1:-Undefined error}
    echo "Failed: $error" >&2
    exit 1
}

function url_encode()
{
	local string_to_encode=${1}
	local encoded_string
	if [ -n "${string_to_encode}" ]; then
		encoded_string=$(python -c "import urllib; print urllib.quote('''${string_to_encode}''')")
		echo "$encoded_string"
	fi
}

### ********* END FUNCTIONS ************@

if [ -n "$KEYCHAIN" ]; then
	KEYCHAIN_WITH_PROVISIONING_PROFILES=${HOME}/Library/Keychains/${KEYCHAIN:-login}.keychain
fi


### Check input
if [ $# -lt 1 ]; then
    echo "Usage $0 <path_to_XCode_project_folder>"
    exit 1
else
	XCODE_PROJECT_DIR=$1	
	if [ ! -d "$XCODE_PROJECT_DIR" ]; then
		failed "${XCODE_PROJECT_DIR} does not exist - aborting"
	fi
	
	
	## Builds windandsite.app in ./build/windandsite.app/
	cd "${XCODE_PROJECT_DIR}"

	## Fix version of build
	# Obtain current Mercurial revision
##	MERCURIAL_WORKSPACE_REVISION=`hg id -i`
##	LATEST_TAG_DISTANCE=`hg log -r "${MERCURIAL_WORKSPACE_REVISION:0:12}" --template '{latesttagdistance}'`
##	if [ "${LATEST_TAG_DISTANCE}" != "0" ]; then
##		VERSION=$(hg log -r "${MERCURIAL_WORKSPACE_REVISION:0:12}" --template '{latesttag}+{latesttagdistance} ({node|short})')
##	else
##		VERSION=$(hg log -r "${MERCURIAL_WORKSPACE_REVISION:0:12}" --template '{latesttag} ({node|short})')
##	fi
	
	agvtool -noscm new-version -all "${VERSION}"

	if [ -n "${KEYCHAIN_PASSWORD}" ]; then
		### Unlock keychain ###
		echo "Unlocking $KEYCHAIN_WITH_PROVISIONING_PROFILES"
		security unlock-keychain -p ${KEYCHAIN_PASSWORD} ${KEYCHAIN_WITH_PROVISIONING_PROFILES}
		if [ $? != 0 ]; then
			failed "Failed unlocking keychain $KEYCHAIN_WITH_PROVISIONING_PROFILES"
		fi
	fi
	
	#describe the available provisioning profiles
 	echo "Available provisioning profiles ${KEYCHAIN_WITH_PROVISIONING_PROFILES}:"
  	security find-identity -p codesigning -v ${KEYCHAIN_WITH_PROVISIONING_PROFILES}

  	#verify that the requested provisioning profile can be found
    (security find-certificate -a -c "$CODE_SIGN_IDENTITY" -Z ${KEYCHAIN_WITH_PROVISIONING_PROFILES} | grep ^SHA-1) || failed "Could not find valid distribution cert $CODE_SIGN_IDENTITY in ${KEYCHAIN_WITH_PROVISIONING_PROFILES}"
	
	if [ -n "${KEYCHAIN}" ]; then
		security default-keychain -s ${KEYCHAIN_WITH_PROVISIONING_PROFILES}
	fi

	
	if [ -z "${KEYCHAIN_WITH_PROVISIONING_PROFILES}" ]; then
		xcodebuild -scheme "${SCHEME}" -configuration "${CONFIGURATION}" ARCHS="\$(ARCHS_UNIVERSAL_IPHONE_OS)" GCC_GENERATE_DEBUGGING_SYMBOLS=YES CGG_THUMB_SUPPORT=NO PROVISIONING_PROFILE="${PROVISIONING_PROFILE}" CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY}" clean build archive 
	else 
		xcodebuild -scheme "${SCHEME}" -configuration "${CONFIGURATION}" ARCHS="\$(ARCHS_UNIVERSAL_IPHONE_OS)" GCC_GENERATE_DEBUGGING_SYMBOLS=YES CGG_THUMB_SUPPORT=NO PROVISIONING_PROFILE="${PROVISIONING_PROFILE}" CODE_SIGN_IDENTITY="${CODE_SIGN_IDENTITY}" OTHER_CODE_SIGN_FLAGS="--keychain ${KEYCHAIN_WITH_PROVISIONING_PROFILES}" clean build archive 
	fi
	##Check if build succeeded
	if [ $? != 0 ]
	then
	  failed "xcodebuild step"
	fi	
	
	## Changes since last time we released a final to Vestas
	
	# The *.build files below are generated by a Post-action script running when xcodebuild archive finishes
	cat XCODEBUILD_ENV.build | sed 's/=/="/g;s/$/"/g'  > XCODEBUILD_ENV.sh.build
	echo "*************** Properties from xcodebuild ****************"
	cat XCODEBUILD_ENV.build
	echo "***********************************************************"
	rm XCODEBUILD_ENV.build
	source XCODEBUILD_ENV.sh.build
	
#	BUILT_PRODUCTS_DIR=`cat BUILT_PRODUCTS_DIR.build`
#	APP_NAME=`cat FULL_PRODUCT_NAME.build`
#	PRODUCT_NAME=`cat PRODUCT_NAME.build`
	
	if [ ! -d "${BUILT_PRODUCTS_DIR}" ]; then
		failed "BUILT_PRODUCTS_DIR '${BUILT_PRODUCTS_DIR}' does not exist"		
	fi

	APP_PATH="${BUILT_PRODUCTS_DIR}/${FULL_PRODUCT_NAME}"
	if [ ! -d "${APP_PATH}" ]; then
		failed "Unable to find archived app '${APP_PATH}'"
	fi

	IPA_FILE_NAME="${PRODUCT_NAME}.ipa" 
	
	IPA_BUILD_DIR=${IPA_BUILD_DIR:-"${WORKSPACE}/build/dist/${SCHEME}"}

	if [ ! -d "$IPA_BUILD_DIR" ]; then
		mkdir -p "$IPA_BUILD_DIR"
	fi

	## Build ipa and sign using distribution cert
	## xcrun -sdk iphoneos PackageApplication -v "$APP_PATH" -o "${IPA_BUILD_DIR}/${IPA_FILE_NAME}" --sign "${CODE_SIGN_IDENTITY}" --embed "${PROVISIONING_PROFILE_PATH}"
	xcrun -sdk iphoneos PackageApplication -v "$APP_PATH" -o "${IPA_BUILD_DIR}/${IPA_FILE_NAME}" --embed "${PROVISIONING_PROFILE_PATH}"
	if [ $? != 0 ]
	then
	  failed "xcrun"
	fi


	##### Overridable properties used in the generated ipa plist file
	ENCODED_IPA_BUILD_DIR=$(url_encode "${IPA_BUILD_DIR}")
	SERVER_URL=${SERVER_URL:-"file:${ENCODED_IPA_BUILD_DIR}"}
	##BUNDLE_IDENTIFIER=${BUNDLE_IDENTIFIER:-"com.trifork.enterprise.Menu-Only"}
	BUNDLE_IDENTIFIER=${BUNDLE_IDENTIFIER:-"com.trifork.enterprise.KMD"}

	BUNDLE_VERSION=${BUNDLE_VERSION:-"1.0"}
	##APP_SUBTITLE=${APP_SUBTITLE:-"Vestas"}
	APP_SUBTITLE=${APP_SUBTITLE:-"KMD"}

	
	TEMPLATE_PLIST="${SCRIPTPATH}/template.plist"
	TEMPLATE_INDEX="${SCRIPTPATH}/template.html"
	
	###
	# Generate a plist file like template.plist with ${VAR's} replaced
	# 
	ENCODED_IPA_FILE_NAME=$(url_encode "${IPA_FILE_NAME}")
	ENCODED_APP_NAME=$(url_encode "${PRODUCT_NAME}")
	
	
	sed "s|SERVER_URL|${SERVER_URL}|;s|IPA_FILE_NAME|${ENCODED_IPA_FILE_NAME}|;s|BUNDLE_IDENTIFIER|${BUNDLE_IDENTIFIER}|;s|BUNDLE_VERSION|${BUNDLE_VERSION}|;s|APP_NAME|${FULL_PRODUCT_NAME}|;s|APP_SUBTITLE|${APP_SUBTITLE}|g" "${TEMPLATE_PLIST}" > "${IPA_BUILD_DIR}/${PRODUCT_NAME}.plist"
	sed "s|SERVER_URL|${SERVER_URL}|;s|APP_NAME|${ENCODED_APP_NAME}|;s|VERSION|${VERSION}|;s|BUILD_NUMBER|${BUILD_NUMBER}|g" "${TEMPLATE_INDEX}" > "${IPA_BUILD_DIR}/index.html"
	
	if [ -d "${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}" ]; then
		zip -r "${IPA_BUILD_DIR}/${DWARF_DSYM_FILE_NAME}.zip" "${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME}"
	else 
		failed "No ${DWARF_DSYM_FOLDER_PATH}/${DWARF_DSYM_FILE_NAME} folder could be found - failing the build"
	fi

	echo "Build Successful:"
	echo "	Files available for distribution in dir ${IPA_BUILD_DIR}:" `ls "${IPA_BUILD_DIR}"`
fi
